%% Enhanced Plots
%% Setup

clear; IntializeNotebook(Quiet=true);
%% Expression Levels

figure;
Tiles = tiledlayout(2, 2);
nexttile
ShowData( ...
    readtable("../Models/LasIObservations.csv"), ...
    readtable("../Models/LasIMeans.csv"), ...
    readtable("../Models/LasIPredictions.csv"), ...
    Panel = "", ...
    Gene = "lasI", ...
    Both = false, ...
    LegendDimensions = [0.215 * 1.5, 0.34 + 0.35, 0.15 * 1.5, 0.13 * 0.5] ...
);
nexttile
ShowData( ...
    readtable("../Models/RhlIObservations.csv"), ...
    readtable("../Models/RhlIMeans.csv"), ...
    readtable("../Models/RhlIPredictions.csv"), ...
    Panel = "", ...
    Gene = "rhlI", ...
    Both = false, ...
    LegendDimensions = [0.51 * 1.5, 0.33 + 0.35, 0.15 * 1.5, 0.13 * 0.5] ...
);
nexttile
ShowData( ...
    readtable("../Models/LasIObservations.csv"), ...
    readtable("../Models/LasIMeans.csv"), ...
    readtable("../Models/LasIPredictions.csv"), ...
    Panel = "", ...
    Gene = "lasI", ...
    Both = true ...
);
nexttile
ShowData( ...
    readtable("../Models/RhlIObservations.csv"), ...
    readtable("../Models/RhlIMeans.csv"), ...
    readtable("../Models/RhlIPredictions.csv"), ...
    Panel = "", ...
    Gene = "rhlI", ...
    Both = true ...
);
exportgraphics(Tiles, "../Prefigures/model.pdf", 'ContentType', 'vector');
%% lasB Expression

figure;
LasBTiles = tiledlayout(2, 2);
nexttile
ShowData( ...
    readtable("../Models/LasBObservations.csv"), ...
    readtable("../Models/LasBMeans.csv"), ...
    readtable("../Models/LasBPredictions.csv"), ...
    Panel = "", ...
    Gene = "lasB", ...
    Both = false, ...,
    LegendDimensions = [0.215 * 1.5, 0.34 + 0.35, 0.15 * 1.5, 0.13 * 0.5] ...
);
%exportgraphics(LasBTiles, "../Prefigures/lasb_ceil.pdf", 'ContentType', 'vector');

nexttile(2)
ShowData( ...
    readtable("../Models/LasBObservations.csv"), ...
    readtable("../Models/LasBMeans.csv"), ...
    readtable("../Models/LasBPredictions.csv"), ...
    Panel = "", ...
    Gene = "lasB", ...
    Both = true ...
);
exportgraphics(LasBTiles, "../Prefigures/lasb_model.pdf", 'ContentType', 'vector');
%% Local Functions

function IntializeNotebook(Options)
% InitializeNotebook() ensures that the live script notebook is in a known
% starting state. Its intent is to guarantee reproducability of the
% notebook results. Note that the `clear` command does not have full
% effect when implemented within a function. Consequently, the notebook
% should execute that command explicitly before calling this function.
%
% For documentation, this function will, by default, display version and
% platform information within the notebook.
    arguments
        Options.Quiet logical = false; % if true, don't show version info
    end

    % clear workspace elements
    clc; clf;

    % initialize environment
    rng default;  % set random number generator for reproducibility
    
    if ~Options.Quiet
        % show version/platform information
        disp(strcat("This notebook created on ", string(datetime)))
        % suppress needless warning message about product ''
        warning('off', 'MATLAB:ver:NotFound');
            ver '' % don't bother with unused toolboxes, etc.
        warning('on',  'MATLAB:ver:NotFound');
    end

end

function ShowData(Observations, Means, Predictions, Options)
    arguments
        Observations  table;
        Means         table;
        Predictions   table;
        Options.Both  logical = false;
        Options.Gene  string;
        Options.Panel string = "";
        Options.LegendDimensions (1,4) double;
    end

    % Styling constants
    FontName = "Arial"; % "Lucida Sans OT";
    FontSize = 12;
    SmallFontSize = 11;
    LargeFontSize = 14;

    C4Color    = [237,176,129]/255;
    C12Color   = [193,65,104]/255;
    MixedColor = [229,113,94]/255;
    LasBColor  = [44,49,114]/255;
    LasIColor  = [165,205,144]/255;
    RhlIColor  = [52,133,141]/255;
    
    % Styles that depend on gene
    if Options.Gene == "lasI"
        Color = LasIColor;
        Title = "\it lasI\rm Expression";
    elseif Options.Gene == "rhlI"
        Color = RhlIColor;
        Title = "\it rhlI\rm Expression";
    else
        Color = LasBColor;
        Title = "\it lasB\rm Expression";        
    end

    % Arrange the data for plotting
    C4Points = Observations(Observations.c12 == 0, :);
    C12Points = Observations(Observations.c4 == 0, :);
    C4Predictions = Predictions(Predictions.c12 == 0, :);
    C12Predictions = Predictions(Predictions.c4 == 0, :);

    if Options.Both
        C4Values = unique(Means.c4);
        C12Values = unique(Means.c12);
    else
        SignalValues = 0:5;
        C4Values = SignalValues;
        C12Values = SignalValues;
        MaxExpression = max(Means.mean_expression) * ...
            ones(length(C4Values), length(C12Values));
    end
 
    Residuals = Predictions.predicted - Means.mean_expression;
    Predicted = zeros(length(C4Values), length(C12Values));
    for i = 1:length(C4Values)
        for j = 1:length(C12Values)
            Predicted(j,i) = Predictions( ...
                Predictions.c4 == C4Values(i) & Predictions.c12 == C12Values(j), ...
                :).predicted;
        end
    end

    if Options.Both
        mesh( ...
            C4Values, C12Values, Predicted, ...
            'FaceAlpha', "0", ...
            'EdgeAlpha', "0.5", ...
            'EdgeColor', MixedColor, ...
            'LineWidth', 1 ...
        );
        hold on
        quiver3( ...
            Predictions.c4, Predictions.c12, Means.mean_expression, ...
            zeros(64,1), zeros(64,1), Residuals, ...
            'AutoScale', "off", ...
            'Marker', ".", ...
            'ShowArrowHead'," off", ...
            'LineWidth', 2, ...
            'MarkerSize', 15, ...
            'MarkerEdgeColor', Color, ...
            'MarkerFaceColor', Color, ...
            'Color', Color ...
        );
        hold off;
    else
        % Show the maximum expression "ceiling"
        surf( ...
            C4Values, C12Values, MaxExpression, ...
            'FaceColor', Color, ...
            'FaceAlpha', 0.75, ...
            'EdgeColor', Color ...
        );
        hold on
    
        % Show RLU/OD for each signal alone; first points, then prediction line
        plot3( ...
            C12Points.c4, C12Points.c12, C12Points.rlu_od, ...
            '.', 'MarkerSize', 15, ...
            'MarkerEdgeColor', C12Color, ...
            'MarkerFaceColor', C12Color ...
        );
        plot3( ...
            C4Points.c4, C4Points.c12, C4Points.rlu_od, ...
            '.', 'MarkerSize', 15, ...
            'MarkerEdgeColor', C4Color, ...
            'MarkerFaceColor', C4Color ...
        );
        plot3( ...
            C12Predictions.c4, C12Predictions.c12, C12Predictions.predicted, ...
            '-', 'LineWidth', 2, 'Color', C12Color ...
        );
        plot3(C4Predictions.c4, C4Predictions.c12, C4Predictions.predicted, ...
            '-', 'LineWidth', 2, 'Color', C4Color ...
        );
        hold off;
    end

    Context = gca;

    % X-Axis
    XLabel = xlabel("[C_4–HSL] (μM)", 'FontName', FontName, 'FontSize', FontSize);
    XLabel.Units = 'normalized';
    XLabel.Position = [0.68, 0.01, 0];
    Context.XAxis.TickLength = [0 0];
    Ticks = get(Context,'XTickLabel');
    set(Context,'XTickLabel', Ticks, 'FontName', FontName);
    set(Context,'XTickLabel', Ticks, 'FontSize', SmallFontSize);
    if Options.Both
        xticklabels({});
    else
        xticks([1 2 3 4 5]);
        xticklabels({1, 2, 3, 4, 5});
    end

    % Y-Axis
    YLabel = ylabel({'[3–oxo–C_{12}–HSL]', '(μM)'}, 'FontName', FontName, 'FontSize', FontSize);
    YLabel.Units = 'normalized';
    YLabel.Position = [0.4, 0.01, 0];
    Context.YAxis.TickLength = [0 0];
    Ticks = get(Context,'YTickLabel');
    set(Context,'YTickLabel', Ticks, 'FontName', FontName);
    set(Context,'YTickLabel', Ticks, 'FontSize', SmallFontSize);
    if Options.Both
        yticklabels({});
    else
        yticks([1 2 3 4 5]);
        yticklabels({"", 2, 3, 4, 5});
    end

    % Z-Axis
    zlabel("RLU/OD", 'FontName', FontName, 'FontSize', FontSize);
    zticklabels({});
    Context.ZAxis.TickLength = [0 0];

    % Panel designation
    title(Options.Panel, 'FontName', FontName, 'FontSize', LargeFontSize, 'FontWeight', "bold");
    Context.TitleHorizontalAlignment = 'left';

    % Plot title
    text(-0.02, 0.95, 0, Title, ...
        'Units', 'normalized', ...
        'FontName', FontName, 'FontSize', LargeFontSize ...
    );

    if ~Options.Both
        % Legend
        C4Legend = strcat( ...
            '\color[rgb]{', ...
                num2str(C4Color(1)), ',', ...
                num2str(C4Color(2)), ',', ...
                num2str(C4Color(3)), ...
            '} ●  \color{black} C_4–HSL Only' ...
        );
        C12Legend = strcat( ...
            '\color[rgb]{', ...
                num2str(C12Color(1)), ',', ...
                num2str(C12Color(2)), ',', ...
                num2str(C12Color(3)), ...
            '} ●  \color{black} 3–oxo–C_{12}–HSL Only' ...
        );
        annotation( ...
            'textbox', Options.LegendDimensions, ...
            'String', {C12Legend, C4Legend}, ...
            'FontSize', SmallFontSize, 'FontName', FontName ...
        );

        % Label maximum expression "ceiling"
        % text( ...
        %     5.25, 4.8, max(Means.mean_expression), ...
        %     "Maximum", ...
        %     'FontName', FontName, 'FontSize', SmallFontSize ...
        % );
        % text( ...
        %     5.25, 3.65, max(Means.mean_expression), ...
        %     "Expression", ...
        %     'FontName', FontName, 'FontSize', SmallFontSize ...
        % );
        % text( ...
        %     5.25, 2.2, max(Means.mean_expression), ...
        %     "with Both", ...
        %     'FontName', FontName, 'FontSize', SmallFontSize ...
        % );
        % text( ...
        %     5.25, 1.05, max(Means.mean_expression), ...
        %     "AHL Signals", ...
        %     'FontName', FontName, 'FontSize', SmallFontSize ...
        % );
    end
end